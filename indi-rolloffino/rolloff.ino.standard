/*
 * A controller example for roof motor controller from the INDI rolloffino roof driver.   
 * 
 * tg August 2018  Original
 * tg February 2020 Generalize to make less installation specific
 *                  Add unspecified usage AUX switch and relay
 *                  Communication protocol in terms of function not switches/relays
 *                  ~ 15KB 2% of Due, 50% of Nano
 *
 * tg November 2021 Break out commandReceived and requestReceived to make alernate actions more 
 *                  obvious/accessible, Remove Due specific code.
 *
 * tg July 2024     Add additional Actions. Indicate to the driver during handshake
 *                  that they are supported and the driver can issue them. The driver needs 
 *                  to be 2.1.3 or later
 */

/*
 * The driver can support up to 8 extra actions. The Arduino sketch indicates it can accept 
 * actions and how many during the initial connection request from the driver.
 *     Return version_id like "V1.3" which indicates the extra actions not supported.
 *     Return version_id like "V1.3 [ACT2]" if two extra actions are supported.
 *
 * Additional actions will typically be used to set extra relays. But this depends on the
 * Arduino implementation. Only indicate support for the number of additional actions the 
 * sketch can recognise and support. For each additional action the Arduino requests, it needs
 * to be prepared to accept a corresponding request for completion status.
 */
 
// Standard example of Arduino with extra Actions replaces the previous rolloff.ino.standard. 
// Can use the extra actions but does not predefine or request them. This sketch is compatible with using a 
// gate opener controller and the Arduino.cc relay shield wihout needing any code edits. Default roof  
// open/close directed to a relay shield or to a four channel relay module wired to those same 
// pins. The example rolloff.ino.relay is similar but does request the driver send Actions and 
// includes a couple of Action examples using a relay shield plus a four channel relay module. 

//////////////////////////////////////////////////////////
// Start of Definitions
//////////////////////////////////////////////////////////

#define VERSION_ID "V1.3"        // Action relays not connected
// #define VERSION_ID "V1.3 [ACT4]"  // Action relay driver support enable

//////////////////////////////////////////////////////////
// Input sensor definitions
//////////////////////////////////////////////////////////


// Input Switch definition, indicates when input sensor switch is open the voltage on the pin will be
// HIGH indicating off. Changing to LOW requires installation of external pull-down resistors.
#define OPEN_CONTACT HIGH


// The driver uses software switches to initiate output commands. Here switches usually refer
// to local status input indicators like a roof fully opened detector. Implementation could
// be in the form of an actual switch or a sensor of some kind. 
// Note on the following Switch definitions
// Define completion status like OPENED in terms of a sensor or switch name. In the normal
// case if the response is to be used, set the switch name to the Arduino pin.
// If there is no assigned switch, set the definition to 0. Then  any related driver
// requests will be ignored.
// You might not want a status request to be automatically handled by a status switch.
// Before responding with a status switch the switch info will be passed to
// "requestReceived" routine for any special handling. For example a generic example does
// not know what an Action will be used for. By default there is no provision for any specific
// operational differences. In the requestReceived routine you can match the sensor switch name
// and add any pin specific condition handling code.

// Define input sensor switch name to pin assignment
#define SWITCH_1 A0
#define SWITCH_2 A1
#define SWITCH_3 A2
#define SWITCH_4 A3
#define SWITCH_5 A4
#define SWITCH_6 A5

// For the normal roof position switches
// Indirection to define a functional state in terms of an input switch or sensor
// Use 0 if a sensor or switch is not provided.
#define SWITCH_OPENED SWITCH_1  // Fully opened is assigned to switch 1
#define SWITCH_CLOSED SWITCH_2  // Fully closed is assigned to switch 2
#define SWITCH_LOCKED SWITCH_3  // External lock
#define SWITCH_AUX    SWITCH_4  // Auxiliary switch
#define ACT1STATE 0
#define ACT2STATE 0
#define ACT3STATE 0       
#define ACT4STATE 0 
#define ACT5STATE 0
#define ACT6STATE 0
#define ACT7STATE 0
#define ACT8STATE 0

//////////////////////////////////////////////////////////
// Command definitions
//////////////////////////////////////////////////////////

// Define output relays, name to pin assignments. The first 4 definitions match the
// Arduino.cc standard Uno relay shield
#define RELAY_1 4
#define RELAY_2 7
#define RELAY_3 8
#define RELAY_4 12
#define RELAY_5 5
#define RELAY_6 6
#define RELAY_7 9
#define RELAY_8 10

// Note on the following FUNC definitions
// Define commands like OPEN an terms of a relay. In the normal case if the command
// is to be used, set the definition to the  corresponding relay pin name. If the
// function is not being used, set the definition to 0. Then any related driver
// requests will be ignored. There are times when you might not want a command to
// be handled by a relay. If a command such as open does not use a relay set its
// definition to 100. That will prevent attempts to initialize it like relay control
// pin. It will pass through the dispatch code and you can pick it up in thev breakout
// routines "commandReceived" for special handling.

// Indirection to define a functional name in terms of a relay
// There are 5 functions here, by default only 4 relays are allocated. Some
// functions might map to the same relay. If open, close and stop all require
// their own relay, then choose between use of AUX or LOCK. Or extend the relay definitions.
// Use 0 if function not supported.  Set to 100 if there is special code added to handle it.
//

#define FUNC_OPEN RELAY_1
#define FUNC_CLOSE RELAY_1  // For a single button controller might map this also to RELAY_1
#define FUNC_ABORT RELAY_1  // For a single button controller might map this also to RELAY_1
#define FUNC_LOCK 0         // If automated roof lock is available.
#define FUNC_AUX 0          // Relay to perform some unspecified function

// Define the additional functions as action relays
// Use 0 if function not supported.  Set to 100 if there is special code added to handle it.
#define FUNC_ACT1 0 // Actions specify relay for Action 1 example: "#define FUNC_ACT1 RELAY 5" 
#define FUNC_ACT2 0
#define FUNC_ACT3 0
#define FUNC_ACT4 0
#define FUNC_ACT5 0
#define FUNC_ACT6 0
#define FUNC_ACT7 0
#define FUNC_ACT8 0

//
// For the relay that a function is mapped to, indicate if that relay is to be momentarily closed
// or held in a closed position. If for example the relay is intended to provide power to a motor
// the need might be to keep it closed until a relay off is received. If a function such as OPEN
// is held on, it will be up to local code in the Arduino to determne when and how to turn it off.
// The host driver sends open and close requests but expects the roof to brings itself to a stop
// when complete.
//
// If HOLD is 0 then the relay will be activated for RELAY_DELAY milliseconds, then released.
// If the relay is simulating a button push/release to the motor controller HOLD would be 0.
//
#define FUNC_OPEN_HOLD 0
#define FUNC_CLOSE_HOLD 0
#define FUNC_ABORT_HOLD 0
#define FUNC_LOCK_HOLD 1
#define FUNC_AUX_HOLD 1
#define FUNC_ACT1_HOLD 1
#define FUNC_ACT2_HOLD 1
#define FUNC_ACT3_HOLD 1
#define FUNC_ACT4_HOLD 1
#define FUNC_ACT5_HOLD 1
#define FUNC_ACT6_HOLD 1
#define FUNC_ACT7_HOLD 1
#define FUNC_ACT8_HOLD 1

// For the relays define whether a HIGH or a LOW activates the relay.
#define FUNC_OPEN_ACTIVE HIGH
#define FUNC_CLOSE_ACTIVE HIGH
#define FUNC_ABORT_ACTIVE HIGH
#define FUNC_LOCK_ACTIVE HIGH
#define FUNC_AUX_ACTIVE HIGH
#define FUNC_ACT1_ACTIVE LOW
#define FUNC_ACT2_ACTIVE LOW
#define FUNC_ACT3_ACTIVE LOW
#define FUNC_ACT4_ACTIVE LOW
#define FUNC_ACT5_ACTIVE LOW
#define FUNC_ACT6_ACTIVE LOW
#define FUNC_ACT7_ACTIVE LOW
#define FUNC_ACT8_ACTIVE LOW

// These delay settings normally work as is
#define RELAY_PRIOR_DELAY 50
#define RELAY_ON_DELAY 500
#define RELAY_POST_DELAY 50

/*
 * Abort (stop) request is only meaningful if roof is in motion.
 * On Abort for a single button controller, only want to activate relay and pulse the 
 * controller if the roof is still moving, then it would stop. If it has already stopped 
 * a pulse could set it off again in the opposite direction.
 * In case the end of run switches are not reached, some way to know if it is moving
 * would be helpful. Short of that estimate how long it takes the roof to open or close
 * This makes the use of abort problematic. Could add something like an encoder in the
 * install to check if the roof is still moving. Otherwise try to avoid using the abort.
 */
 #define  ABORT_MAX_SEC 30

#define BAUD_RATE 38400

//////////////////////////////////////////////////////////
// End of Definitions
//////////////////////////////////////////////////////////

struct switch_control {
  const char* function;
  unsigned int source;
};

const int switch_count = 12;
switch_control switch_info[switch_count] = {
  { "OPENED", SWITCH_OPENED },
  { "CLOSED", SWITCH_CLOSED },
  { "LOCKED", SWITCH_LOCKED },
  { "AUXSTATE", SWITCH_AUX },
  { "ACT1STATE", ACT1STATE },
  { "ACT2STATE", ACT2STATE },
  { "ACT3STATE", ACT3STATE },
  { "ACT4STATE", ACT4STATE },
  { "ACT5STATE", ACT5STATE },
  { "ACT6STATE", ACT6STATE },
  { "ACT7STATE", ACT7STATE },
  { "ACT8STATE", ACT8STATE }
};

enum cmd_input {
  CMD_NONE,
  CMD_OPEN,
  CMD_CLOSE,
  CMD_ABORT,
  CMD_LOCK,
  CMD_AUXSET,
  CMD_ACT1SET,
  CMD_ACT2SET,
  CMD_ACT3SET,
  CMD_ACT4SET,
  CMD_ACT5SET,
  CMD_ACT6SET,
  CMD_ACT7SET,
  CMD_ACT8SET
} command_input;
const int cmd_len = CMD_ACT8SET + 1;

struct relay_control {
  cmd_input cmd;
  const char* function;
  unsigned int relay;
  unsigned int hold;
  unsigned int activate;
};

relay_control relay_info[cmd_len] = {
  { CMD_NONE, "None", 0, 0, FUNC_OPEN_ACTIVE },
  { CMD_OPEN, "OPEN", FUNC_OPEN, FUNC_OPEN_HOLD, FUNC_OPEN_ACTIVE },
  { CMD_CLOSE, "CLOSE", FUNC_CLOSE, FUNC_CLOSE_HOLD, FUNC_CLOSE_ACTIVE },
  { CMD_ABORT, "ABORT", FUNC_ABORT, FUNC_ABORT_HOLD, FUNC_ABORT_ACTIVE },
  { CMD_LOCK, "LOCK", FUNC_LOCK, FUNC_LOCK_HOLD, FUNC_LOCK_ACTIVE },
  { CMD_AUXSET, "AUXSET", FUNC_AUX, FUNC_AUX_HOLD, FUNC_AUX_ACTIVE },
  { CMD_ACT1SET, "ACT1SET", FUNC_ACT1, FUNC_ACT1_HOLD, FUNC_ACT1_ACTIVE },
  { CMD_ACT2SET, "ACT2SET", FUNC_ACT2, FUNC_ACT2_HOLD, FUNC_ACT2_ACTIVE },
  { CMD_ACT3SET, "ACT3SET", FUNC_ACT3, FUNC_ACT3_HOLD, FUNC_ACT3_ACTIVE },
  { CMD_ACT4SET, "ACT4SET", FUNC_ACT4, FUNC_ACT4_HOLD, FUNC_ACT4_ACTIVE },
  { CMD_ACT5SET, "ACT5SET", FUNC_ACT5, FUNC_ACT5_HOLD, FUNC_ACT5_ACTIVE },
  { CMD_ACT6SET, "ACT6SET", FUNC_ACT6, FUNC_ACT6_HOLD, FUNC_ACT6_ACTIVE },
  { CMD_ACT7SET, "ACT7SET", FUNC_ACT7, FUNC_ACT7_HOLD, FUNC_ACT7_ACTIVE },
  { CMD_ACT8SET, "ACT8SET", FUNC_ACT8, FUNC_ACT8_HOLD, FUNC_ACT8_ACTIVE }
};

//  Maximum length of messages = 63                                               *|
const char* ERROR1 = "The controller response message was too long";
const char* ERROR2 = "The controller failure message was too long";
const char* ERROR3 = "Command input request is too long";
const char* ERROR4 = "Invalid command syntax, both start and end tokens missing";
const char* ERROR5 = "Invalid command syntax, no start token found";
const char* ERROR6 = "Invalid command syntax, no end token found";
const char* ERROR7 = "Roof controller unable to parse command";
const char* ERROR8 = "Command must map to either set a relay or get a switch";
const char* ERROR9 = "Request not implemented in controller";
const char* ERROR10 = "Abort ignored, roof already stationary, or time expired";
const char* ERROR11 = "Unknown input, ";
const char* ERROR12 = "Action directive incompatible with current state ";


// Buffer limits must match those in the driver
#define MAX_INPUT 45
#define MAX_RESPONSE 127
#define MAX_MESSAGE 63

const char* version_id = VERSION_ID;

uint32_t timeMove = 0;
const int cLen = 15;
const int tLen = 15;
const int vLen = MAX_RESPONSE;
char command[cLen + 1];
char target[tLen + 1];
char value[vLen + 1];

void sendAck(char* val) {
  char response[MAX_RESPONSE];
  if (strlen(val) > MAX_MESSAGE)
    sendNak(ERROR1);
  else {
    strcpy(response, "(ACK:");
    strcat(response, target);
    strcat(response, ":");
    strcat(response, val);
    strcat(response, ")");
    Serial.println(response);
    Serial.flush();
  }
}

void sendNak(const char* errorMsg) {
  char buffer[MAX_RESPONSE];
  if (strlen(errorMsg) > MAX_MESSAGE)
    sendNak(ERROR2);
  else {
    strcpy(buffer, "(NAK:");
    strcat(buffer, target);
    strcat(buffer, ":");
    strcat(buffer, errorMsg);
    strcat(buffer, ")");
    Serial.println(buffer);
    Serial.flush();
  }
}

/*
 * The standard relay shield uses a HIGH to activate the relays.
 *
 * In contrast a relay module might use a LOW signal.
 * For example:
 * Using a SainSmart 4 channel, 5V relay module. The relay module's JD-VCC jumper 
 * is removed. A separate 5V supply powers the relay module using the GND and 
 * JD-VCC pins where the jumper was removed. The Arduino is powered  separately. 
 * No common ground between the Arduino and the relay module so pull the ground 
 * connector to the relay module. The ground for the input pins is provided back 
 * at the Arduino. The relay output uses the NO and common connectors. The relay 
 * requires a LOW on the signal pin to activate. This is provided when a ON 
 * command is received. Default input is HIGH = inactive relay, open contact.
 *
 * id           Relay pin number
 * activate     HIGH or LOW to activate
 * hold         1 indicates to hold relay closed until a relay OFF is received.
 *              0 indicates a momentary close is wanted
 * value        "ON" or "OFF" Turn relay on or off
 */
void setRelay(int id, int activate, int hold, char* value) {
  int deactivate = LOW;
  if (activate != HIGH)
    deactivate = HIGH;

  if (strcmp(value, "ON") == 0) {
    digitalWrite(id, deactivate);  // NO RELAY would normally already be deactivated
    delay(RELAY_PRIOR_DELAY);
    digitalWrite(id, activate);  // Activate the NO relay (close it)
    if (hold == 0) {
      delay(RELAY_ON_DELAY);
      digitalWrite(id, deactivate);  // Turn NO relay off
    }
  } else {
    digitalWrite(id, deactivate);  // Turn NO relay off
  }
  delay(RELAY_POST_DELAY);
}

/*
 * Get switch value
 * Expect a NO switch configured with a pull up resistor.
 * NO switch: Inactive HIGH input to the pin with pull up resistor, logical 0 input. 
 * When switch closes The LOW voltage logical 1 is applied to the input pin. 
 * The off or on value is to be sent to the host in the ACK response
 */
void getSwitch(int id, char* value) {
  if (digitalRead(id) == OPEN_CONTACT)
    strcpy(value, "OFF");
  else
    strcpy(value, "ON");
}

bool isSwitchOn(int id) {
  char switch_value[16 + 1];
  getSwitch(id, switch_value);
  if (strcmp(switch_value, "ON") == 0) {
    return true;
  }
  return false;
}

bool parseCommand()  // (command:target:value)
{
  bool start = false;
  bool eof = false;
  int recv_count = 0;
  int wait = 0;
  int offset = 0;
  char startToken = '(';
  char endToken = ')';
  const int bLen = MAX_INPUT;
  char inpBuf[bLen + 1];

  memset(inpBuf, 0, sizeof(inpBuf));
  memset(command, 0, sizeof(command));
  memset(target, 0, sizeof(target));
  memset(value, 0, sizeof(value));

  while (!eof && (wait < 20)) {
    if (Serial.available() > 0) {
      Serial.setTimeout(1000);
      recv_count = Serial.readBytes((inpBuf + offset), 1);
      if (recv_count == 1) {
        offset++;
        if (offset >= MAX_INPUT) {
          sendNak(ERROR3);
          return false;
        }
        if (inpBuf[offset - 1] == startToken) {
          start = true;
        }
        if (inpBuf[offset - 1] == endToken) {
          eof = true;
          inpBuf[offset] = '\0';
        }
        continue;
      }
    }
    wait++;
    delay(100);
  }

  if (!start || !eof) {
    if (!start && !eof)
      sendNak(ERROR4);
    else if (!start)
      sendNak(ERROR5);
    else if (!eof)
      sendNak(ERROR6);
    return false;
  } else {
    strcpy(command, strtok(inpBuf, "(:"));
    strcpy(target, strtok(NULL, ":"));
    strcpy(value, strtok(NULL, ")"));
    if ((strlen(command) >= 3) && (strlen(target) >= 1) && (strlen(value) >= 1)) {
      return true;
    } else {
      sendNak(ERROR7);
      return false;
    }
  }
}

/*
 * Use the parseCommand routine to decode message
 * Determine associated action in the message. Resolve the relay or switch associated 
 * pin with the target identity. Acknowledge any initial connection request. Return 
 * negative acknowledgement with message for any errors found.  Dispatch to commandReceived
 * or requestReceived routines to activate the command or get the requested switch state
 */
void readUSB() {
  // Confirm there is input available, read and parse it.
  if (Serial && (Serial.available() > 0)) {
    if (parseCommand()) {
      command_input = CMD_NONE;
      int relay = -1;  // -1 = not found, 0 = not implemented, pin number = supported
      int sw = -1;     //      "                 "                    "
      bool connecting = false;
      unsigned int activate = HIGH;
      unsigned int hold;
      char diag[MAX_MESSAGE];

      // On initial connection return the version
      if (strcmp(command, "CON") == 0) {
        connecting = true;
        strcpy(value, version_id);  // Can be seen on host to confirm what is running
        sendAck(value);
      }

      // Handle command to set relay or perform local breakout functionality
      // SET: OPEN, CLOSE, ABORT, LOCK, AUXSET, ACTn
      else if (strcmp(command, "SET") == 0) {
        for (int i = 0; i < cmd_len; i++) {
          if (strcmp(target, relay_info[i].function) == 0) {
            command_input = relay_info[i].cmd;
            if (command_input == CMD_ABORT) {
              if (!isStopAllowed()) {
                sendNak(ERROR10);
                return;
              }
            }
            relay = relay_info[i].relay;
            hold = relay_info[i].hold;
            activate = relay_info[i].activate;
            if (command_input == CMD_OPEN || command_input == CMD_CLOSE) {
              timeMove = millis()/1000;
            }
            break;
          }
        }
      }

      // Handle requests to obtain the status of switches
      // GET: OPENED, CLOSED, LOCKED, AUXSTATE ACT1 - ACTn
      else if (strcmp(command, "GET") == 0) {
        for (int i = 0; i < switch_count; i++) {
          if (strcmp(target, switch_info[i].function) == 0) {
            sw = switch_info[i].source;
            break;
          }
        }
      }
      /*
       * See if there was a valid command or request 
       */
      if (!connecting) {
        if ((relay == -1) && (sw == -1)) {
          strcpy(diag, ERROR11);
          strcat(diag, target);
          sendNak(diag);  // Unknown input
        }

        // Command or Request not implemented
        else if ((relay == 0 || relay == -1) && (sw == 0 || sw == -1)) {
          strcpy(value, "OFF");  // Request Not implemented
          sendAck(value);
        }

        // Valid input received

        // A command was received
        // Set the relay associated with the command and send acknowlege to host
        else if (relay > 0)  // Set Relay response
        {
          commandReceived(relay, activate, hold, value);
        }

        // A get state request was received
        else if (sw > 0)  // Get switch response
        {
          requestReceived(sw);
        }
      }  // end !connecting
    }    // end command parsed
  }      // end Serial input found
}


////////////////////////////////////////////////////////////////////////////////
// Abort movement command received, test to see if abort is allowed.
// If not return false and an error message will be returned to the host. If yes
// then return true. If either fully open or fully closed switches are on then
// deny the request by returning false. If neither switch is on then if there is
// a specific button (relay) assigned that can stop movement then return true
// to allow it to do so.
//
// This implementation assumes a one button setup and one which does not know if
// the roof is still moving or has hit something and already stopped. Before taking
// action see how long it has been since movement was initiated. If it is longer
// than the estimate to open or close the roof, assume motion has already stopped.
// In that case avoid emulating the single button push because that would set the
// roof moving again. If it seems that the roof could be moving then return true.
//
// Returning true will cause the Abort request to appear in the commandReceived
// routine where it will activate the requested relay.
//
bool isStopAllowed() {
  uint32_t timeNow = millis()/1000;
  uint32_t timeBegin = timeMove;
  timeMove = 0;

  // If the roof is either fully opened or fully closed, ignore the request.
  if (isSwitchOn(SWITCH_OPENED) || isSwitchOn(SWITCH_CLOSED)) {
    return false;
  }

  if (timeBegin == 0)
    return false;

  // If time since last open or closed is longer than time allowed return false
  if ((timeNow - timeBegin) >= ABORT_MAX_SEC) {
    return false;
  } else

  // Stop will be attempted
  {
    return true;
  }
}


////////////////////////////////////////////////////////////////////////////////
// Command received

// Here after pin associations resolved and request known
// The default is to set the associated relay to the requested state "ON" or "OFF" and
// send acknowledgement to the host.
// target is the name associated with the relay "OPEN", "CLOSE", "ABORT", "LOCK", "AUXSET".
// It will be used when  sending the acknowledgement to the host. Find out if a particular
// command is being processed using if (strcmp(target, "OPEN") == 0) {do something}
//
// relay: pin id of the relay
// activate HIGH or LOW to activate relay
// hold:  whether relay is to be set permanently =0, or temporarily =1
// value: Set the relay "ON" or "OFF"
//
//
void commandReceived(int relay, int activate, int hold, char* value) {
  // Intervene here
  setRelay(relay, activate, hold, value);
  sendAck(value);  // Send acknowledgement that relay pin associated with "target" was activated to value requested
}

////////////////////////////////////////////////////////////////////////////////

// Here after pin associations resolved and request known
// Request to obtain state of a switch
// The default is to read the associated switch and return result to the host
// target is the name associated with the switch "OPENED", "CLOSED" etc and will
// be used when sending the acknowledgement to the host. Find out if a certain request is being processed using
// if (strcmp(target, "OPENED") == 0) {do something}
//
// sw:     The switch's pin identifier.
// value   getSwitch will read the pin and set this to "ON" or "OFF"
void requestReceived(int sw) {
  // Intervene here
  
  getSwitch(sw, value);
  sendAck(value);  // Send result of reading pin associated with "target"
}


// One time initialization
void setup() {
  // Establish USB port.
  Serial.begin(BAUD_RATE);  // Baud rate to match that in the driver

  //////////////////////////
  // Initialize the input sensors/switches
  //
  for (int i = 0; i < switch_count; i++) {
    initInput(switch_info[i].source);
  }

  ////////////////////////
  // Initialize the relays
  //
  for (int i = 1; i < cmd_len; i++) {
    initRelay(relay_info[i].relay, relay_info[i].activate);
  }
}

void initInput(int pin) {
  if (pin > 0 && pin < 100) {
    if (OPEN_CONTACT == HIGH)
      pinMode(pin, INPUT_PULLUP);
    else
      pinMode(pin, INPUT);
  }
}

// Receives what activates the relay and sets the opposite
void initRelay(unsigned int pin, unsigned int activate) {
  if (pin > 0 && pin < 100) {
    pinMode(pin, OUTPUT);

    if (activate == HIGH) {
      digitalWrite(pin, LOW);
    } else
      digitalWrite(pin, HIGH);
  }
}

// Wait here for command or switch request from host
void loop() {
  while (Serial.available() <= 0) {

    for (int cnt = 0; cnt < 60; cnt++) {
      if (Serial.available() > 0)
        break;
      else {
        delay(100);
      }  
    } 
    readUSB();
  }
}
